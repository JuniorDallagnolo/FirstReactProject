{"version":3,"sources":["loader.svg","components/UserCard.js","components/Home.js","components/NotFound.js","components/Header.js","components/Posts.js","components/Todos.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","UserCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","id","item","username","email","react_default","a","createElement","react","reactstrap_es","sm","body","outline","color","href","concat","active","Component","Home","componentDidMount","console","log","users","length","fetch","then","response","json","obj","key","hasOwnProperty","isEmpty","Error","setTimeout","setState","isLoading","catch","err","error","className","src","loader","alt","map","UserCard_UserCard","NotFound","Header","Posts","posts","match","params","userID","title","Todos","todos","progress","Math","floor","random","completed","value","App","Header_Header","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.14c1f697.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.5d5d9eef.svg\";","import React, { Component, Fragment } from \"react\";\nimport { NavLink, Col, Card, Button, CardTitle, CardText } from \"reactstrap\";\n\nexport default class UserCard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      id: this.props.item.id,\n      username: this.props.item.username,\n      email: this.props.item.email\n    };\n  }\n  render() {\n    return (\n      <Fragment>\n        <Col sm=\"6\">\n          <Card body>\n            <CardTitle>{this.state.username}</CardTitle>\n            <CardText>From {this.state.email}</CardText>\n            <Button outline color=\"secondary\">\n              <NavLink href={`${this.state.id}/posts`} active>\n                Check Posts\n              </NavLink>\n            </Button>\n            <br />\n            <Button outline color=\"secondary\">\n              <NavLink href={`${this.state.id}/todos`} active>\n                Check todos\n              </NavLink>\n            </Button>\n          </Card>\n        </Col>\n      </Fragment>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Row, Container } from \"reactstrap\";\nimport UserCard from \"./UserCard\";\nimport loader from \"../loader.svg\";\n\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      error: null,\n      users: []\n    };\n  }\n\n  componentDidMount = () => {\n    console.log(this.state);\n    if (this.state.users.length === 0) {\n      fetch(\"https://jsonplaceholder.typicode.com/users/\")\n        .then(response => response.json())\n        .then(json => {\n          //Checking if you got and Object and it's not empty\n          if (typeof json === \"object\" && !isEmpty(json)) {\n            setTimeout(() => {\n              this.setState({\n                isLoading: false,\n                users: json\n              });\n            }, 1000);\n          } else {\n            throw new Error(\"The Json had corrupted data\");\n          }\n        })\n        .catch(err => {\n          this.setState({\n            error: err\n          });\n          console.log(err);\n        });\n    } else {\n      this.setState({\n        isLoading: false\n      });\n    }\n  };\n\n  render() {\n    return (\n      <Container className=\"pr-0\">\n        <h5 className=\"text-center\">\n          <u>List of Users</u>\n        </h5>\n        {this.state.error && (\n          <p>\n            OH NOES Something went wrong, please try turning your Computer off,\n            then on. I'm kidding check the CONSOLE for more information\n          </p>\n        )}\n        {this.state.isLoading &&\n          !this.state.error && (\n            <img src={loader} className=\"LazyLoader\" alt=\"logo\" />\n          )}\n        {!this.state.isLoading && (\n          <Row>\n            {this.state.users.map(item => {\n              return <UserCard key={item.id} item={item} />;\n            })}\n          </Row>\n        )}\n      </Container>\n    );\n  }\n}\n//Function that checks if an object is not empty\nfunction isEmpty(obj) {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) return false;\n  }\n  return true;\n}\n","import React, { Component } from \"react\";\n\nexport default class NotFound extends Component {\n  render() {\n    return (\n      <section className=\"page_404\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-sm-12 \">\n              <div className=\"col-sm-10 col-sm-offset-1  text-center dirty-fix\">\n                <div className=\"four_zero_four_bg\">\n                  <h1 className=\"text-center \">404</h1>\n                </div>\n\n                <div className=\"contant_box_404\">\n                  <h3 className=\"h2\">\n                    Careful! You wandered in primitive grounds,\n                  </h3>\n\n                  <p>the page you are looking for was unplugged!</p>\n\n                  <a href=\"#/\" className=\"link_404\">\n                    Go to Home\n                  </a>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Jumbotron, Button, NavLink } from \"reactstrap\";\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <Jumbotron>\n        <h1 className=\"display-3\">First React Project AJAX</h1>\n        <p className=\"lead\">\n          You can navigate through Users and their posts and to-dos\n        </p>\n        <Button outline color=\"primary\">\n          <NavLink href=\"/\">Home</NavLink>\n        </Button>\n      </Jumbotron>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Row, Container, Col, Card, CardTitle, CardText } from \"reactstrap\";\nimport loader from \"../loader.svg\";\n\nexport default class Posts extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      error: null,\n      id: this.props.match.params.userID,\n      posts: []\n    };\n  }\n\n  componentDidMount = () => {\n    console.log(this.props);\n    fetch(`https://jsonplaceholder.typicode.com/users/${this.state.id}/posts`)\n      .then(response => response.json())\n      .then(json => {\n        //Checking if you got and Object and it's not empty\n        if (typeof json === \"object\" && !isEmpty(json)) {\n          setTimeout(() => {\n            this.setState({ isLoading: false, posts: json });\n          }, 1000);\n        } else {\n          throw new Error(\"The Json had corrupted data\");\n        }\n      })\n      .catch(err => {\n        this.setState({ error: err });\n        console.log(err);\n      });\n  };\n\n  render() {\n    return (\n      <Container className=\"pr-0\">\n        <h5 className=\"text-center\">\n          <u>List of Posts</u>\n        </h5>\n        {this.state.error && (\n          <p>\n            OH NOES Something went wrong, please try turning your Computer off,\n            then on. I'm kidding check the CONSOLE for more information\n          </p>\n        )}\n        {this.state.isLoading &&\n          !this.state.error && (\n            <img src={loader} className=\"LazyLoader\" alt=\"logo\" />\n          )}\n        {!this.state.isLoading && (\n          <Row>\n            {this.state.posts.map(item => {\n              return (\n                <Col sm=\"6\" key={item.id}>\n                  <Card body>\n                    <CardTitle>Title: {item.title}</CardTitle>\n                    <CardText>Description: {item.body}</CardText>\n                  </Card>\n                </Col>\n              );\n            })}\n          </Row>\n        )}\n      </Container>\n    );\n  }\n}\n//Function that checks if an object is not empty\nfunction isEmpty(obj) {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) return false;\n  }\n  return true;\n}\n","import React, { Component, Fragment } from \"react\";\nimport { Row, Container, Col, Card, CardTitle, Progress } from \"reactstrap\";\nimport loader from \"../loader.svg\";\n\nexport default class Todos extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      error: null,\n      id: this.props.match.params.userID,\n      todos: []\n    };\n  }\n\n  componentDidMount = () => {\n    console.log(this.props);\n    fetch(`https://jsonplaceholder.typicode.com/users/${this.state.id}/todos`)\n      .then(response => response.json())\n      .then(json => {\n        //Checking if you got and Object and it's not empty\n        if (typeof json === \"object\" && !isEmpty(json)) {\n          setTimeout(() => {\n            this.setState({ isLoading: false, todos: json });\n          }, 1000);\n        } else {\n          throw new Error(\"The Json had corrupted data\");\n        }\n      })\n      .catch(err => {\n        this.setState({ error: err });\n        console.log(err);\n      });\n  };\n\n  render() {\n    return (\n      <Container className=\"pr-0\">\n        <h5 className=\"text-center\">\n          <u>List of To-dos</u>\n        </h5>\n        {this.state.error && (\n          <p>\n            OH NOES Something went wrong, please try turning your Computer off,\n            then on. I'm kidding check the CONSOLE for more information\n          </p>\n        )}\n        {this.state.isLoading &&\n          !this.state.error && (\n            <img src={loader} className=\"LazyLoader\" alt=\"logo\" />\n          )}\n        {!this.state.isLoading && (\n          <Row>\n            {this.state.todos.map(item => {\n              item.progress = Math.floor(Math.random() * 100);\n              return (\n                <Col sm=\"6\" key={item.id}>\n                  <Card body>\n                    <CardTitle>Title: {item.title}</CardTitle>\n                    {item.completed && (\n                      <Fragment>\n                        <div>Done</div>\n                        <Progress color=\"success\" value=\"100\" />\n                      </Fragment>\n                    )}\n                    {!item.completed && (\n                      <Fragment>\n                        <div>{item.progress}</div>\n                        <Progress color=\"primary\" value={item.progress} />\n                      </Fragment>\n                    )}\n                  </Card>\n                </Col>\n              );\n            })}\n          </Row>\n        )}\n      </Container>\n    );\n  }\n}\n//Function that checks if an object is not empty\nfunction isEmpty(obj) {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) return false;\n  }\n  return true;\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./Debug.js\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport NotFound from \"./components/NotFound\";\nimport Header from \"./components/Header\";\nimport Posts from \"./components/Posts\";\nimport Todos from \"./components/Todos\";\n\nclass App extends Component {\n  render() {\n    return (\n      <main className=\"App\">\n        <Header />\n        <BrowserRouter>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/:userID\" component={Home} />\n            <Route path=\"/:userID/posts\" component={Posts} />\n            <Route path=\"/:userID/todos\" component={Todos} />\n            <Route component={NotFound} />\n          </Switch>\n        </BrowserRouter>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}